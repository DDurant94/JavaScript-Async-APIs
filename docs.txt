About:
  In this repository, I have set up two programs. The first is a Marvel character search engine that connects to Marvel’s public API 
  (https://developer.marvel.com/), allowing users to search for any Marvel character they’d like to find. Information displayed from the 
  API includes the character’s image, name, description, and copyright from Marvel. Additional information can be added at a later date, 
  such as all the comics that character appears in, along with its own description and cover image.

  The next program is a countdown timer. Users can enter hours, minutes, and seconds to count down from. Every 30 seconds, an alarm will 
  notify the user that 30 seconds have passed on the countdown. Additionally, users can enter a message to be displayed after a user-set 
  amount of time. There’s also an alarm set to trigger every minute until the user clicks the ‘Stop Alarm’ button.
  

Exactions:
  None

Questions:
  1. Exploring Asynchronous JavaScript
Objective: The objective of this assignment is to familiarize students with asynchronous JavaScript concepts using promises and the Fetch API, 
and demonstrate their practical application in interacting with external APIs.

Problem Statement: You are tasked with developing a web application that interacts with the Marvel Comics API. The application should handle 
asynchronous operations such as fetching data and updating the user interface dynamically using modern JavaScript features.

Task 1: Obtaining API Key and Configuration
Obtain an API key from the Marvel Comics API website. Investigate and understand the necessary configurations required to authenticate 
requests to the API.

Task 2: Fetching Characters Using Fetch API
Implement a function to fetch Marvel Comics characters asynchronously from the API endpoint using the Fetch API and promises. Utilize the 
API key and configurations obtained in Task 1. Log the fetched characters to the console.

Task 3: Updating User Interface Dynamically
Write a function to dynamically update the user interface with the fetched characters' information. Utilize promises and the Fetch API to 
ensure that the UI updates only after the characters are successfully fetched.

Expected Outcomes:

Students should understand the concept of asynchronous programming in JavaScript.
Students should be able to implement promises, and the Fetch API to handle asynchronous operations effectively.
Students should be able to develop web applications that interact with external APIs, such as the Marvel Comics API, and dynamically update 
the user interface based on fetched data.

2. Implementing Timers in JavaScript
Objective: The objective of this assignment is to enable students to comprehend and implement timers using intervals and timeouts in JavaScript. 
Through practical exercises, students will learn how to schedule and execute tasks at specific intervals and delays.

Problem Statement: You are tasked with developing a web-based countdown timer application that allows users to set a timer for a specified 
duration. The application should utilize intervals and timeouts to update the timer display dynamically and notify the user when the timer 
expires.

Task 1: Countdown Timer
Create a countdown timer that starts from a user-defined duration (in seconds) and updates every second until it reaches zero. Use 
setInterval to update the timer display.

Task 2: Delayed Notification
Implement a function that displays a notification after a specified delay (in milliseconds) using setTimeout.

Task 3: Repeat Notification
Develop a function that repeatedly displays a notification at fixed intervals until the user dismisses it. Use setInterval to schedule the 
notifications.

Expected Outcomes:
Students will gain proficiency in utilizing intervals and timeouts to implement timers and scheduling tasks in JavaScript.
Students will understand how to create dynamic and interactive features such as countdown timers and notifications in web applications.
Students will be able to apply their knowledge of intervals and timeouts to enhance user experience and functionality in their projects.
